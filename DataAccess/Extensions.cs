using DataAccess.Attributes;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Reflection;
using System.Text.RegularExpressions;

namespace DataAccess
{
    internal static partial class Extensions
    {
        internal static string ToPostgresName(this string str)
        {
            return SnakeCaseRegex().Replace(str, "${l}_${u}").ToLower();
        }

        internal static List<T> To<T>(this DataTable dt) where T : new()
        {
            var columnProps = ColumnProperty.GetColumnProps<T>();
            ColumnProperty.CheckColumns<T>(dt, columnProps);
            return dt.AsEnumerable().Select(row => row.To<T>(columnProps)).ToList();
        }

        internal static T To<T>(this DataRow dataRow) where T : new()
        {
            var columnProps = ColumnProperty.GetColumnProps<T>();
            ColumnProperty.CheckColumns<T>(dataRow.Table, columnProps);
            return dataRow.To<T>(columnProps);
        }

        internal static T To<T>(this DataRow dataRow, IEnumerable<ColumnProperty> columnProps) where T : new()
        {
            var t = new T();
            foreach (var columnProp in columnProps)
            {
                columnProp.Property.SetValue(t, dataRow[columnProp.ColumnName]);
            }
            return t;
        }

        [GeneratedRegex("(?<l>[a-z])(?<u>[A-Z])")]
        private static partial Regex SnakeCaseRegex();
    }

    internal class ColumnProperty
    {
        public PropertyInfo Property { get; set; }
        public string ColumnName { get; set; }

        public static IEnumerable<ColumnProperty> GetColumnProps<T>(bool includeAutoGenerated = true)
        {
            return typeof(T).GetProperties().Select(prop => new ColumnProperty()
            {
                Property = prop,
                ColumnName = prop.GetCustomAttribute<ColumnAttribute>()?.Name ?? ""
            }).Where(columnProp => columnProp.ColumnName != "" && (includeAutoGenerated || columnProp.Property.GetCustomAttribute<AutoGeneratedAttribute>() is null));
        }

        public static void CheckColumns<T>(DataTable dt, IEnumerable<ColumnProperty> columnProps)
        {
            var missingColumns = columnProps.Where(columnProp => !dt.Columns.Contains(columnProp.ColumnName)).ToList();

            if (missingColumns.Any())
                throw new ArgumentException($"Data could not be converted to type: {typeof(T)}. Missing columns: {string.Join(", ", missingColumns)}");
        }
    }
}
