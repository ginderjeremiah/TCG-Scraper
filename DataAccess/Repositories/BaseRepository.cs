using Npgsql;
using NpgsqlTypes;
using System.Data;

namespace DataAccess.Repositories
{
    public class BaseRepository
    {
        protected string ConnectionString { get; set; }

        protected BaseRepository(string connectionString)
        {
            ConnectionString = connectionString;
        }

        protected DataSet FillSet(string selectCommandText, params NpgsqlParameter[] sqlParameters)
        {
            DataSet ds = new();
            using var connection = new NpgsqlConnection(ConnectionString);
            var command = new NpgsqlCommand(selectCommandText, connection);
            command.Parameters.AddRange(sqlParameters);
            var adapter = new NpgsqlDataAdapter(command);
            adapter.Fill(ds);
            return ds;
        }

        protected DataTable FillTable(string selectCommandText, params NpgsqlParameter[] sqlParameters)
        {
            DataTable dt = new();
            using var connection = new NpgsqlConnection(ConnectionString);
            var command = new NpgsqlCommand(selectCommandText, connection);
            command.Parameters.AddRange(sqlParameters);
            var adapter = new NpgsqlDataAdapter(command);
            adapter.Fill(dt);
            return dt;
        }

        protected DataTable FillTable<T>(IEnumerable<T> objList, bool includeAutoGenerated = true)
        {
            DataTable dt = new();
            var columnProps = ColumnProperty.GetColumnProps<T>(includeAutoGenerated);
            dt.Reset();
            foreach (var columnProp in columnProps)
            {
                dt.Columns.Add(columnProp.ColumnName, Nullable.GetUnderlyingType(columnProp.Property.PropertyType) ?? columnProp.Property.PropertyType);
            }
            foreach (var obj in objList)
            {
                var row = dt.NewRow();
                foreach (var columnProp in columnProps)
                {
                    row[columnProp.ColumnName] = columnProp.Property.GetValue(obj);
                }
                dt.Rows.Add(row);
            }
            return dt;
        }

        protected void CopyToSqlTable(DataTable dt, string tableName, string postLoadSproc)
        {
            if (!tableName.EndsWith("staging"))
                throw new ArgumentException("Copying to non-staging tables is not allowed!!");

            var columns = dt.Columns.Cast<DataColumn>();
            using var connection = new NpgsqlConnection(ConnectionString);
            {
                connection.Open();

                using var copier = connection.BeginBinaryImport($"COPY {tableName} ({string.Join(",", columns.Select(col => col.ColumnName))}) FROM STDIN (FORMAT BINARY)");

                foreach (var row in dt.AsEnumerable())
                {
                    copier.StartRow();
                    foreach (var col in columns)
                    {
                        var val = row[col];
                        var type = GetNpgsqlDbType(val);
                        if (type.HasValue)
                            copier.Write(val, type.Value);
                        else
                            copier.WriteNull();
                    }
                }

                copier.Complete();
                copier.Close();
            }

            //do not reuse connection due to weird timeout issue
            ExecuteSproc(postLoadSproc);
        }

        protected void CopyToSqlTable<T>(IEnumerable<T> objList, string tableName, string postLoadSproc)
        {
            if (!tableName.EndsWith("staging"))
                throw new ArgumentException("Copying to non-staging tables is not allowed!!");

            var columns = ColumnProperty.GetColumnProps<T>(false);
            using var connection = new NpgsqlConnection(ConnectionString);
            {
                connection.Open();

                using var copier = connection.BeginBinaryImport($"COPY {tableName} ({string.Join(",", columns.Select(col => col.ColumnName))}) FROM STDIN (FORMAT BINARY)");

                foreach (var obj in objList)
                {
                    copier.StartRow();
                    foreach (var col in columns)
                    {
                        var val = col.Property.GetValue(obj);
                        var type = GetNpgsqlDbType(val);
                        if (type.HasValue)
                            copier.Write(val, type.Value);
                        else
                            copier.WriteNull();
                    }
                }

                copier.Complete();
                copier.Close();
            }

            //do not reuse connection due to weird timeout issue
            ExecuteSproc(postLoadSproc);
        }

        protected List<T> QueryToList<T>(string commandText, params NpgsqlParameter[] sqlParameters) where T : new()
        {
            using var connection = new NpgsqlConnection(ConnectionString);
            var command = connection.CreateCommand();

            command.CommandText = commandText;
            command.CommandType = CommandType.Text;
            command.Parameters.AddRange(sqlParameters);
            connection.Open();

            var reader = command.ExecuteReader();
            var colProps = ColumnProperty.GetColumnProps<T>();
            var objs = new List<T>();

            while (reader.Read())
            {
                T obj = new();
                foreach (var prop in colProps)
                {
                    switch (reader.GetValue(prop.ColumnName))
                    {
                        case DBNull:
                        case null:
                            prop.Property.SetValue(obj, null);
                            break;
                        case object val:
                            prop.Property.SetValue(obj, val);
                            break;
                    }
                }
                objs.Add(obj);
            }
            return objs;
        }

        protected void ExecuteSproc(string sprocName)
        {
            using var connection = new NpgsqlConnection(ConnectionString);
            connection.Open();
            ExecuteSproc(sprocName, connection);
        }

        protected void ExecuteSproc(string sprocName, NpgsqlConnection connection)
        {
            using var command = connection.CreateCommand();
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = sprocName;
            command.ExecuteNonQuery();
        }

        private static NpgsqlDbType? GetNpgsqlDbType(object? val)
        {
            return val switch
            {
                int => NpgsqlDbType.Integer,
                string => NpgsqlDbType.Text,
                float => NpgsqlDbType.Real,
                DateTime => NpgsqlDbType.Timestamp,
                short => NpgsqlDbType.Smallint,
                bool => NpgsqlDbType.Boolean,
                DBNull => null,
                null => null,
                _ => throw new NotImplementedException($"Type conversion for {val.GetType()} has not been implemented.")
            };
        }


    }
}
